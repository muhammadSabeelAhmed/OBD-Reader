package com.sabeel.obdreader.io;

import android.content.Context;
import android.os.Environment;
import android.util.Log;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.sabeel.obdreader.GeneralClasses.Global;
import com.sabeel.obdreader.GeneralClasses.LiveData;
import com.sabeel.obdreader.GeneralClasses.PreferencesHandler;
import com.sabeel.obdreader.net.ObdReading;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Map;

public class LogCSVWriter {
    private FirebaseDatabase firebaseDatabase;
    private DatabaseReference databaseReference;
    private FirebaseAuth mAuth;
    private PreferencesHandler preferencesHandler;
    private static final String TAG = LogCSVWriter.class.getName();
    private static final String HEADER_CSV = "This is a logfile generated by pires.obd.reader";
    private static final String[] NAMES_COLUMNS = {"TIME", "LATITUDE", "LONGITUDE", "ALTITUDE", "VEHICLE_ID",
            "BAROMETRIC_PRESSURE", "ENGINE_COOLANT_TEMP", "FUEL_LEVEL", "ENGINE_LOAD", "AMBIENT_AIR_TEMP",
            "ENGINE_RPM", "INTAKE_MANIFOLD_PRESSURE", "MAF", "Term Fuel Trim Bank 1",
            "FUEL_ECONOMY", "Long Term Fuel Trim Bank 2", "FUEL_TYPE", "AIR_INTAKE_TEMP",
            "FUEL_PRESSURE", "SPEED", "Short Term Fuel Trim Bank 2",
            "Short Term Fuel Trim Bank 1", "ENGINE_RUNTIME", "THROTTLE_POS", "DTC_NUMBER",
            "TROUBLE_CODES", "TIMING_ADVANCE", "EQUIV_RATIO"};
    private static final String[] NAMES_COLUMNS_ONLY_READINGS = {
            "BAROMETRIC_PRESSURE", "ENGINE_COOLANT_TEMP", "FUEL_LEVEL", "ENGINE_LOAD", "AMBIENT_AIR_TEMP",
            "ENGINE_RPM", "INTAKE_MANIFOLD_PRESSURE", "MAF", "Term Fuel Trim Bank 1",
            "FUEL_ECONOMY", "Long Term Fuel Trim Bank 2", "FUEL_TYPE", "AIR_INTAKE_TEMP",
            "FUEL_PRESSURE", "SPEED", "Short Term Fuel Trim Bank 2",
            "Short Term Fuel Trim Bank 1", "ENGINE_RUNTIME", "THROTTLE_POS", "DTC_NUMBER",
            "TROUBLE_CODES", "TIMING_ADVANCE", "EQUIV_RATIO"};
    private boolean isFirstLine;
    private BufferedWriter buf;

    public LogCSVWriter(String filename, String dirname) throws FileNotFoundException, RuntimeException {
        try {
            File sdCard = Environment.getExternalStorageDirectory();
            File dir = new File(sdCard.getAbsolutePath() + File.separator + dirname);
            if (!dir.exists()) dir.mkdirs();
            Log.d(TAG, "Path is " + sdCard.getAbsolutePath() + File.separator + dirname);
            File file = new File(dir, filename);
            FileOutputStream fos = new FileOutputStream(file);
            OutputStreamWriter osw = new OutputStreamWriter(fos);
            this.buf = new BufferedWriter(osw);
            this.isFirstLine = true;
            Log.d(TAG, "Constructed the LogCSVWriter");
        } catch (Exception e) {
            Log.e(TAG, "LogCSVWriter constructor failed");
        }
    }

    public void closeLogCSVWriter() {
        try {
            buf.flush();
            buf.close();
            Log.d(TAG, "Flushed and closed");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void writeLineCSV(ObdReading reading, Context context) {
        preferencesHandler = new PreferencesHandler(context);
        mAuth = FirebaseAuth.getInstance();
        firebaseDatabase = FirebaseDatabase.getInstance();
        databaseReference = firebaseDatabase.getReference("DataRecords");
        ArrayList<String> mydata = new ArrayList<>();
        if (isFirstLine) {
            mydata.clear();
            String oldcrl = "";
            oldcrl = HEADER_CSV + reading.toString();
            addLine(oldcrl);
            isFirstLine = false;

            // Add line with the columns
            oldcrl = "";
            for (String ccln : NAMES_COLUMNS) {
                oldcrl += ccln + ";";
                mydata.add("" + ccln);
            }
            addLine(oldcrl.substring(0, oldcrl.length() - 1)); // remove last ";"

        } else {
            mydata.clear();
            String crl = "";
            crl = reading.getTimestamp() + ";" +
                    reading.getLatitude() + ";" +
                    reading.getLongitude() + ";" +
                    reading.getAltitude() + ";" +
                    reading.getVin() + ";";
            mydata.add(0, "" + reading.getTimestamp());
            mydata.add(1, "" + reading.getLatitude());
            mydata.add(2, "" + reading.getLongitude());
            mydata.add(3, "" + reading.getAltitude());
            mydata.add(4, "" + reading.getVin());
            Map<String, String> read = reading.getReadings();
            for (String ccln : NAMES_COLUMNS_ONLY_READINGS) {
                crl += read.get(ccln) + ";";
                mydata.add("" + ccln);
            }
            addLine(crl.substring(0, crl.length() - 1));
        }
        // Uploading vehicle Data to the Firebase...........
        LiveData liveData = new LiveData("" + preferencesHandler.getUemail(), "" + preferencesHandler.getType(), "" + preferencesHandler.getModel(), "" + preferencesHandler.getEngine()
                , "" + preferencesHandler.getYear(), "" + mydata.get(0), "" + mydata.get(1), "" + mydata.get(2), "" + mydata.get(3), "" + preferencesHandler.getType() + " " + preferencesHandler.getModel() + " " + preferencesHandler.getYear()
                , "" + mydata.get(5), "" + mydata.get(6), "" + mydata.get(7), "" + mydata.get(8), "" + mydata.get(9)
                , "" + mydata.get(10), "" + mydata.get(11), "" + mydata.get(12), "" + mydata.get(13), "" + mydata.get(14)
                , "" + mydata.get(15), "" + mydata.get(16), "" + mydata.get(17), "" + mydata.get(18), "" + mydata.get(19)
                , "" + mydata.get(20), "" + mydata.get(21), "" + mydata.get(22), "" + mydata.get(23)
                , "" + mydata.get(24), "" + mydata.get(25), "" + mydata.get(26), "" + mydata.get(27));

        DatabaseReference newRef = databaseReference.push();
        newRef.setValue(liveData);
    }


    private void addLine(String line) {
        if (line != null) {
            try {
                buf.write(line, 0, line.length());
                buf.newLine();
                Log.d(TAG, "LogCSVWriter: Wrote" + line);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
